syntax = "proto3";
package client;

//////////////////////////////////////////////////////////////////////////////////////////////////
// ClientToServer & ClientFromServer /////////////////////////////////////////////////////////////

// A client request frame.
//
// Client requests come in a few different forms:
// - Connnect: a request to establish a client connection.
// - Disconnect: a request sent to disconnect the client from the server.
// - PubEphemeral: a request to publish an ephemeral message.
// - PubRpc: a request to publish an RPC message.
// - PubStream: a request to publish a message to a durable stream.
// - SubEphemeral: a request to subscribe to an ephemeral messaging exchange.
// - SubRpc: a request to subscribe as a handler of an RPC endpoint.
// - SubStream: a request to subscribe as a stream consumer.
// - SubPipeline: a request to subscribe to a stage of a pipeline (RPC endpoint or stream).
// - UnsubStream: unsubscribe from a stream.
// - UnsubPipeline: unsubscribe from a stage of a pipeline.
// - EnsureRpcEndpoint: a request to ensure that the specified RPC endpoint exists.
// - EnsureStream: a request to ensure that the specified stream exists with the given config.
// - EnsurePipeline: a request to ensure that the specified pipeline exists with the
// given structure and config.
// - StreamAck: a request to ack a stream message. Ack'ing a stream message may also be
// accompanied by a set of messages to be published to other streams. See the guide for more
// details on how this works in the Durable Streams chapter.
// - PipelineAck: a request to ack a message from a pipeline stage. This request must include
// the payload of data which is to be written to downstream stages. Ack'ing the message & writing
// its output to downstream stages is done transactionally. This request is used even if the stage
// is an RPC endpoint stage, in which case only the data is written for the downstream stages.
message ClientFrame {
  FrameMeta meta = 1;
  oneof payload {
    ConnectRequest connect = 2;
    DisconnectRequest disconnect = 3;

    PubEphemeralRequest pub_ephemeral = 4;
    PubRpcRequest pub_rpc = 5;
    PubStreamRequest pub_stream = 6;

    SubEphemeralRequest sub_ephemeral = 7;
    SubRpcRequest sub_rpc = 8;
    SubStreamRequest sub_stream = 9;
    SubPipelineRequest sub_pipeline = 10;

    UnsubStreamRequest unsub_stream = 11;
    UnsubPipelineRequest unsub_pipeline = 12;

    EnsureRpcEndpointRequest ensure_endpoint = 13;
    EnsureStreamRequest ensure_stream = 14;
    EnsurePipelineRequest ensure_pipeline = 15;

    AckStreamRequest ack_stream = 16;
    AckPipelineRequest ack_pipeline = 17;
  }
}

message ServerFrame {
  FrameMeta meta = 1;
  oneof payload {
    ConnectResponse connect = 2;
    DisconnectResponse disconnect = 3;

    PubEphemeralResponse pub_ephemeral = 4;
    PubRpcResponse pub_rpc = 5;
    PubStreamResponse pub_stream = 6;

    SubEphemeralResponse sub_ephemeral = 7;
    SubRpcResponse sub_rpc = 8;
    SubStreamResponse sub_stream = 9;
    SubPipelineResponse sub_pipeline = 10;

    UnsubStreamResponse unsub_stream = 11;
    UnsubPipelineResponse unsub_pipeline = 12;

    EnsureRpcEndpointResponse ensure_endpoint = 13;
    EnsureStreamResponse ensure_stream = 14;
    EnsurePipelineResponse ensure_pipeline = 15;

    AckStreamResponse ack_stream = 16;
    AckPipelineResponse ack_pipeline = 17;
  }
}

message FrameMeta {
  // The ID of the associated request.
  //
  // This is used to establish request/response semantics over the bi-directional stream. These
  // IDs should have strong uniqueness guarantees. Clients are encouraged to use UUID4s, which is
  // what the server uses for server side initiated frames sent to clients.
  string id = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// Errors ////////////////////////////////////////////////////////////////////////////////////////

// An error which has taken place as the result of a client request.
message ClientError {
  string message = 1;
  ErrorCode code = 2;
}

// An enumeration of all error codes which may come from the system.
enum ErrorCode {
  // An internal error.
  INTERNAL = 0;
  // The server needs the client to perform the connection handshake before proceeding.
  HANDSHAKE_REQUIRED = 1;
  // The given credentials are invalid.
  UNAUTHORIZED = 2;
  // The token being used by the client does not have sufficient permissions for the requested operation.
  INSUFFICIENT_PERMISSIONS = 3;
  // The given input is invalid.
  INVALID_INPUT = 4;
  // The target stream of the request is unknown.
  TARGET_STREAM_UNKNOWN = 5;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// Common Components /////////////////////////////////////////////////////////////////////////////

// The ID of a stream entry.
//
// This wrapper type is used to allow for leaving the ID field null when there is no assocaited ID.
message StreamEntryId {
  // The associated ID. Even an empty string will be treated as an ID.
  string id = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ConnectRequest & ConnectResponse //////////////////////////////////////////////////////////////

// A request to connect to the cluster.
message ConnectRequest {
  // The JWT credentials being used for this connection.
  string token = 1;
  // The configured liveness threshold for this client connection.
  //
  // The server will treat this as a duration in seconds since the client's last heartbeat, after
  // which the client connection will be closed by the server.
  uint32 liveness_threshold = 2;
}

// A response to a connection request.
message ConnectResponse {
  oneof response {
    // An error associated with this response. If this field is populated, no other fields should be used.
    ClientError error = 1;
    // The ID assigned to this connection by the server.
    string id = 2;
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// DisconnectRequest & DisconnectResponse ////////////////////////////////////////////////////////

message DisconnectRequest {
}

message DisconnectResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// PubEphemeralRequest & PubEphemeralResponse ////////////////////////////////////////////////////

message PubEphemeralRequest {
}

message PubEphemeralResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// PubRpcRequest & PubRpcResponse ////////////////////////////////////////////////////////////////

message PubRpcRequest {
}

message PubRpcResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// PubStreamRequest & PubStreamResponse //////////////////////////////////////////////////////////

message PubStreamRequest {
  // The namespace of the stream to publish to.
  string namespace = 1;
  // The name of the stream to publish to.
  string stream = 2;
  // The data payload of the entry to publish.
  bytes payload = 3;
  // // The ID of the entry. Leave null if there is no associated ID.
  // StreamEntryId id = 4;
}

message PubStreamResponse {
  oneof result {
    // An error associated with this response.
    ClientError error = 1;
    // The index of the published stream entry.
    uint64 index = 2;
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// SubEphemeralRequest & SubEphemeralResponse ////////////////////////////////////////////////////

message SubEphemeralRequest {
}

message SubEphemeralResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// SubRpcRequest & SubRpcResponse ////////////////////////////////////////////////////////////////

message SubRpcRequest {
}

message SubRpcResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// SubStreamRequest & SubStreamResponse //////////////////////////////////////////////////////////

message SubStreamRequest {
}

message SubStreamResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// SubPipelineRequest & SubPipelineResponse //////////////////////////////////////////////////////

message SubPipelineRequest {
}

message SubPipelineResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// UnsubStreamRequest & UnsubStreamResponse //////////////////////////////////////////////////////

message UnsubStreamRequest {
}

message UnsubStreamResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// UnsubPipelineRequest & UnsubPipelineResponse //////////////////////////////////////////////////

message UnsubPipelineRequest {
}

message UnsubPipelineResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// EnsureRpcEndpointRequest & EnsureRpcEndpointResponse //////////////////////////////////////////

message EnsureRpcEndpointRequest {
}

message EnsureRpcEndpointResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// EnsureStreamRequest & EnsureStreamResponse ////////////////////////////////////////////////////

message EnsureStreamRequest {
  // The namespace which the ensured stream should exist in.
  string namespace = 1;
  // The name of the stream to ensure.
  string name = 2;
}

message EnsureStreamResponse {
  // An error associated with this response. Will be null if no error has taken place.
  ClientError error = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// EnsurePipelineRequest & EnsurePipelineResponse ////////////////////////////////////////////////

message EnsurePipelineRequest {
}

message EnsurePipelineResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// AckStreamRequest & AckStreamResponse //////////////////////////////////////////////////////////

message AckStreamRequest {
}

message AckStreamResponse {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// AckPipelineRequest & AckPipelineResponse //////////////////////////////////////////////////////

message AckPipelineRequest {
}

message AckPipelineResponse {
}
