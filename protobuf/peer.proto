syntax = "proto3";
package peer;

import "client.proto";

service Peer {
  // A handshake request, part of the initial peer connection setup.
  rpc Handshake(HandshakeMsg) returns (HandshakeMsg);

  // A Raft AppendEntries RPC.
  rpc RaftAppendEntries(RaftAppendEntriesMsg) returns (RaftAppendEntriesMsg);
  // A Raft Vote RPC.
  rpc RaftVote(RaftVoteMsg) returns (RaftVoteMsg);
  // A Raft InstallSnapshot RPC.
  rpc RaftInstallSnapshot(RaftInstallSnapshotMsg) returns (RaftInstallSnapshotMsg);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

// A handshake frame holding all data needed for a successful handshake between peers.
message HandshakeMsg {
  // The ID of the node sending this frame.
  uint64 node_id = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

// A Raft AppendEntries RPC.
message RaftAppendEntriesMsg {
  string cluster = 1;
  bytes payload = 2;
}

// A Raft Vote RPC.
message RaftVoteMsg {
  string cluster = 1;
  bytes payload = 2;
}

// A Raft InstallSnapshot RPC.
message RaftInstallSnapshotMsg {
  string cluster = 1;
  bytes payload = 2;
}
