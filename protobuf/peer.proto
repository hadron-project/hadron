syntax = "proto3";
package peer;

import "client.proto";

service Peer {
  // A handshake request, part of the initial peer connection setup.
  rpc Handshake(HandshakeMsg) returns (HandshakeMsg);

  // A Raft AppendEntries RPC.
  rpc RaftAppendEntries(RaftAppendEntriesMsg) returns (RaftAppendEntriesMsg);
  // A Raft Vote RPC.
  rpc RaftVote(RaftVoteMsg) returns (RaftVoteMsg);
  // A Raft InstallSnapshot RPC.
  rpc RaftInstallSnapshot(RaftInstallSnapshotMsg) returns (RaftInstallSnapshotMsg);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

// Details of a client ephemeral messaging subscription.
message MessagingSub {
  // The namespace which this subscription pertains to.
  string namespace = 1;
  // The topic matcher this subscription is using.
  string topic = 2;
}

// Details of a client RPC subscription.
message RpcSub {
  // The namespace which this subscription pertains to.
  string namespace = 1;
  // The endpoint which this subscription pertains to.
  string endpoint = 2;
}

// Details of a client Stream subscription.
message StreamSub {
  // The namespace which this subscription pertains to.
  string namespace = 1;
  // The name of the stream which the subscription pertains to.
  string stream = 2;
  // The name of the consumer group which the subscription pertains to.
  string consumer_group = 3;
}

// Details of a client Pipeline subscription.
message PipelineSub {
  // The namespace which this subscription pertains to.
  string namespace = 1;
  // The name of the pieline which the subscription pertains to.
  string pipeline = 2;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

// A handshake frame holding all data needed for a successful handshake between peers.
message HandshakeMsg {
  // The ID of the node sending this frame.
  uint64 node_id = 1;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

// A Raft AppendEntries RPC.
message RaftAppendEntriesMsg {
  string cluster = 1;
  bytes payload = 2;
}

// A Raft Vote RPC.
message RaftVoteMsg {
  string cluster = 1;
  bytes payload = 2;
}

// A Raft InstallSnapshot RPC.
message RaftInstallSnapshotMsg {
  string cluster = 1;
  bytes payload = 2;
}
