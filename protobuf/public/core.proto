syntax = "proto3";
package core;

// // A user's authentication context.
// message Auth {
//     string jwt = 1;
// }

// // An OpenTracing binary carrier.
// //
// // See https://github.com/opentracing/specification/blob/master/specification.md#note-required-formats-for-injection-and-extraction
// //
// // The span ID can be used in a "child of" or "follows from" context as needed be the receiver.
// // The debug ID may be an emptry string. In which case, it should be reconded as a `none` value.
// //
// // **NOTE WELL:** this object will always appear behind a pointer. If the pointer is null, then
// // the receiver should interpret this as being a trace which is not sampled. As such, all
// // downstream samplers should be "passive samplers". IE, they will generate a new sampled span
// // only if it has references.
// message Context {
//   TraceId trace_id = 1;
//   uint64 span_id = 2;
//   string debug_id = 3;
//   map<string, string> baggage = 4;
// }

// // The ID of a trace. This is compatible with Jaeger's uint128 trace IDs.
// message TraceId {
//   uint64 high = 1;
//   uint64 low = 2;
// }

// // Error is a structured description of any error which has occurred during an RPC request.
// //
// // This should be used as the first field of any RPC response message. Its presence represents an
// // error which has occurred during the RPC execution.
// //
// // Any information given to an instance of this object must be presentable to a user. Ensure the
// // data has been sanitized and is ready for user consumption.
// message Error {
//   string message = 1;
//   uint32 status = 2;
//   string code = 3; // A code mapped to an internal meaning. Can be used by clients.
//   map<string, string> meta = 4;
// }
