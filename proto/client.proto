syntax = "proto3";
package client;

///////////////////////////////////////////////////////////////////////////////
// Components /////////////////////////////////////////////////////////////////

// An empty message.
message Empty {}

// An error object which is returned from the Hadron server under various conditions.
//
// Clients can match on specific error variants to drive behavior.
message Error {
    // A summary of the error which has taken place.
    string message = 1;
}

// A stream record with its associated offset and data.
message Record {
    // The offset of this record.
    uint64 offset = 1;
    // The data payload of this record.
    bytes data = 2;
}

// Details on a Hadron replica set.
message ReplicaSet {
    // The name of the replica set.
    //
    // This is immutable and is always used to identify partition assignment.
    string name = 1;
}

///////////////////////////////////////////////////////////////////////////////
// Metadata ///////////////////////////////////////////////////////////////////

// All known Hadron metadata.
message MetadataResponse {
    // The name of the cluster which was queried.
    string cluster_name = 1;
    // Details on the replica set which was queried.
    string replica_set = 2;
    // All known replica sets in the cluster.
    repeated ReplicaSet all_replica_sets = 3;
}

//////////////////////////////////////////////////////////////////////////////
// Auth //////////////////////////////////////////////////////////////////////

// An enumeration of possible pub/sub access levels.
enum PubSubAccess {
    Pub = 0;
    Sub = 1;
    All = 2;
}

// A request to create a token.
//
// The API is as follows:
// - If the token is to be granted `all` access, then no other fields will be considered.
// - If the token is to be granted `metrics` access, then no other fields will be consdiered.
// - If neither of the above are true, then a token will be created with the given set
// of namespace grants.
message CreateTokenRequest {
    // Grant permissions on all resources in the system.
    bool all = 1;
    // Grant permissions on only the cluster metrics system.
    bool metrics = 2;
    // Grant permissions on namespace scoped resources.
    repeated NamespaceGrant namespaced = 3;
}

// A response to a token creation request.
message CreateTokenResponse {
    oneof result {
        string ok = 1;
        Error err = 2;
    }
}

// A permissions grant on a set of resources of a specific namespace.
message NamespaceGrant {
    // The namespace to which this grant applies.
    string namespace = 1;
    // Grant full access to all resources of the namespace.
    bool all = 2;
    // Permissions granted on ephemeral messaging exchanges.
    repeated NameMatcher exchanges = 3;
    // Permissions granted on RPC endpoints.
    repeated NameMatcher endpoints = 4;
    // Permissions granted on streams.
    repeated NameMatcher streams = 5;
    // Permissions to modify the schema of the namespace.
    //
    // A token with schema permissions is allowed to create, update & delete streams, pipelines
    // and other core resources in the associated namespace.
    bool schema = 6;
}

// A name matcher along with the associated access level for a successful match.
message NameMatcher {
    string matcher = 1;
    PubSubAccess access = 2;
}

///////////////////////////////////////////////////////////////////////////////
// Schema /////////////////////////////////////////////////////////////////////

// A request to update the schema of the Hadron cluster.
message SchemaUpdateRequest {
    oneof type {
        // A managed schema update request.
        SchemaUpdateManaged managed = 1;
        // A one-off schema update request.
        SchemaUpdateOneOff oneoff = 2;
    }
}

// A response from an earlier `SchemaUpdateRequest`.
message SchemaUpdateResponse {
    // A bool indicating if the request was a no-op, which would only apply to
    // managed schema updates.
    bool was_noop = 1;
}

// A managed schema update request.
message SchemaUpdateManaged {
    // A set of Hadron schema documents to apply to the system.
    string schema = 1;
    // The branch name of this set of schema updates.
    string branch = 2;
    // The timestamp of this set of schema updates.
    //
    // This should be an epoch timestamp with millisecond precision.
    int64 timestamp = 3;
}

// A one-off schema update request.
message SchemaUpdateOneOff {
    // A set of Hadron schema documents to apply to the system.
    string schema = 1;
}

//////////////////////////////////////////////////////////////////////////////
// Stream Pub ////////////////////////////////////////////////////////////////

// A request to setup a stream publisher channel.
message StreamPubSetupRequest {
    // The name of the publisher.
    string name = 1;
}

// A response to a stream publisher setup request.
message StreamPubSetupResponse {
    oneof result {
        Empty ok = 1;
        Error err = 2;
    }
}

// A request to publish data to a stream.
message StreamPubRequest {
    // The batch of entries to publish.
    repeated bytes batch = 1;
}

// A response from publishing data to a stream.
message StreamPubResponse {
    oneof result {
        StreamPubResponseOk ok = 1;
        Error err = 2;
    }
}

// An ok response from publishing data to a stream.
message StreamPubResponseOk {
    // The offset of the last entry to be written to the stream.
    uint64 last_offset = 1;
}

//////////////////////////////////////////////////////////////////////////////
// Stream Sub ////////////////////////////////////////////////////////////////

// A request to setup a stream subscriber channel.
message StreamSubSetupRequest {
    // The name of the subscriber.
    string group_name = 1;
    // A bool indicating if this subscription should be considered durable; if `false`, then its
    // offsets will be held in memory only.
    bool durable = 2;
    // The maximum batch size for this subscriber.
    uint32 max_batch_size = 3;

    reserved 4 to 9;
    // The starting point from which to begin the subscription, if the subscription has no
    // previously recorded offsets.
    oneof starting_point {
        Empty beginning = 10;
        Empty latest = 11;
        uint64 offset = 12;
    }
    reserved 13 to 20;
}

// A response to a stream subscriber setup request.
message StreamSubSetupResponse {
    oneof result {
        Empty ok = 1;
        Error err = 2;
    }
}

// A payload of stream entries delivered to a subscriber by the server.
message StreamSubDelivery {
    // A batch of records for subscriber processing.
    repeated Record batch = 1;
    // The last offset included in this batch.
    uint64 last_included_offset = 2;
}

// A subscriber response to a subscription delivery, either `ack`ing or `nack`ing the delivery.
message StreamSubDeliveryResponse {
    oneof result {
        // All records delivered on the last payload have been processed.
        Empty ack = 1;
        // An error has taken place during subscriber processing, and the delivered batch was not
        // successfully processed.
        //
        // The given error message will be recorded by the server for observability.
        Error nack = 2;
    }
}

//////////////////////////////////////////////////////////////////////////////
// Pipeline Sub //////////////////////////////////////////////////////////////

// A request to setup a pipeline stage subscriber channel.
message PipelineSubSetupRequest {
    // The name of the pipeline stage to consume.
    string stage_name = 1;
}

// A response to a pipeline stage subscriber setup request.
message PipelineSubSetupResponse {
    oneof result {
        Empty ok = 1;
        Error err = 2;
    }
}

// A payload of pipeline stage inputs for a particular pipeline stage.
message PipelineSubDelivery {
    // The name of the pipeline stage to which this delivery corresponds.
    string stage = 1;
    // The source stream offset corresponding to this pipeline instance.
    uint64 offset = 2;
    // A mapping of pipeline stage inputs based on the definition of this pipeline stage.
    //
    // Every key will be the name of the corresponding pipeline stage output which has been declared
    // as an input dependency for this stage, or the `root_event` if declared as a dependency for
    // this stage.
    map<string,bytes> inputs = 3;
}

// A subscriber response to a subscription delivery, either `ack`ing or `nack`ing the delivery.
message PipelineSubDeliveryResponse {
    oneof result {
        // An acknowledgement of successful processing of this stage and its inputs, along with the
        // require stage output of this stage.
        PipelineStageOutput ack = 1;
        // An error has taken place during subscriber processing, and the delivered batch was not
        // successfully processed.
        //
        // The given error message will be recorded by the server for observability.
        Error nack = 2;
    }
}

// The output of a successful pipeline stage consumption.
message PipelineStageOutput {
    // The base output of the corresponding pipeline stage.
    bytes output = 1;
}
