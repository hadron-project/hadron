syntax = "proto3";
package client;

///////////////////////////////////////////////////////////////////////////////
// Components /////////////////////////////////////////////////////////////////

// An empty message.
message Empty {}

// An error object which is returned from the Hadron server under various conditions.
//
// Clients can match on specific error variants to drive behavior.
message Error {
    // A summary of the error which has taken place.
    string message = 1;
}

// An event record formatted according to the CloudEvents specification.
message Event {
    // The ID of this event, which is always the offset of this event on its stream partition.
    //
    // See [`id`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#id).
    uint64 id = 1;
    // The source of this event, formatted as `/{cluster}/{stream}/{partition}/`.
    //
    // See [`source`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#source-1).
    string source = 2;
    // The CloudEvents specification version which the event uses.
    //
    // See [`specversion`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#specversion).
    string specversion = 3;
    // The type identifier of this event.
    //
    // See [`type`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#type).
    string type = 4;
    // The subject of the event in the context of the event producer.
    //
    // This is used by Hadron in much the same way that Kafka uses the event `key`.
    //
    // See [`subject`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#subject).
    string subject = 5;
    // Any additional optional attributes or extension attributes of this event.
    //
    // See [`optional attributes`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#optional-attributes)
    // and [`extension context attributes`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#extension-context-attributes).
    map<string, string> optattrs = 6;
    // The data payload of this event.
    bytes data = 7;
}

// A new event record to be published to a stream partition.
message NewEvent {
    // The type identifier of this event.
    //
    // See [`type`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#type).
    string type = 1;
    // The source of this event.
    //
    // See [`source`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#source-1).
    string source = 2;
    // The subject of the event in the context of the event producer.
    //
    // This is used by Hadron in much the same way that Kafka uses the event `key`.
    //
    // See [`subject`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#subject).
    string subject = 3;
    // Any additional optional attributes or extension attributes of this event.
    //
    // See [`optional attributes`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#optional-attributes)
    // and [`extension context attributes`](https://github.com/cloudevents/spec/blob/v1.0.1/spec.md#extension-context-attributes).
    map<string, string> optattrs = 4;
    // The data payload of this event.
    bytes data = 5;
}

//////////////////////////////////////////////////////////////////////////////
// Stream Pub ////////////////////////////////////////////////////////////////

// A request to setup a stream publisher channel.
message StreamPubSetupRequest {
    // The name of the publisher.
    string name = 1;
}

// A response to a stream publisher setup request.
message StreamPubSetupResponse {
    oneof result {
        Empty ok = 1;
        Error err = 2;
    }
}

// A request to publish data to a stream.
message StreamPubRequest {
    // The batch of entries to publish.
    repeated NewEvent batch = 1;
}

// A response from publishing data to a stream.
message StreamPubResponse {
    oneof result {
        StreamPubResponseOk ok = 1;
        Error err = 2;
    }
}

// An ok response from publishing data to a stream.
message StreamPubResponseOk {
    // The offset of the last entry to be written to the stream.
    uint64 last_offset = 1;
}

//////////////////////////////////////////////////////////////////////////////
// Stream Sub ////////////////////////////////////////////////////////////////

// A request to setup a stream subscriber channel.
message StreamSubSetupRequest {
    // The name of the subscriber.
    string group_name = 1;
    // A bool indicating if this subscription should be considered durable; if `false`, then its
    // offsets will be held in memory only.
    bool durable = 2;
    // The maximum batch size for this subscriber.
    uint32 max_batch_size = 3;

    reserved 4 to 9;
    // The starting point from which to begin the subscription, if the subscription has no
    // previously recorded offsets.
    oneof starting_point {
        Empty beginning = 10;
        Empty latest = 11;
        uint64 offset = 12;
    }
    reserved 13 to 20;
}

// A response to a stream subscriber setup request.
message StreamSubSetupResponse {
    oneof result {
        Empty ok = 1;
        Error err = 2;
    }
}

// A payload of stream entries delivered to a subscriber by the server.
message StreamSubDelivery {
    // A batch of records for subscriber processing.
    repeated Event batch = 1;
    // The last offset included in this batch.
    uint64 last_included_offset = 2;
}

// A subscriber response to a subscription delivery, either `ack`ing or `nack`ing the delivery.
message StreamSubDeliveryResponse {
    oneof result {
        // All events delivered on the last payload have been processed.
        Empty ack = 1;
        // An error has taken place during subscriber processing, and the delivered batch was not
        // successfully processed.
        //
        // The given error message will be recorded by the server for observability.
        Error nack = 2;
    }
}

//////////////////////////////////////////////////////////////////////////////
// Pipeline Sub //////////////////////////////////////////////////////////////

// A request to setup a pipeline stage subscriber channel.
message PipelineSubSetupRequest {
    // The name of the pipeline stage to consume.
    string stage_name = 1;
}

// A response to a pipeline stage subscriber setup request.
message PipelineSubSetupResponse {
    oneof result {
        Empty ok = 1;
        Error err = 2;
    }
}

// A payload of pipeline stage inputs for a particular pipeline stage.
message PipelineSubDelivery {
    // The name of the pipeline stage to which this delivery corresponds.
    string stage = 1;
    // The source stream offset corresponding to this pipeline instance.
    uint64 offset = 2;
    // A mapping of pipeline stage inputs based on the definition of this pipeline stage.
    //
    // Every key will be the name of the corresponding pipeline stage output which has been declared
    // as an input dependency for this stage, or the `root_event` if declared as a dependency for
    // this stage.
    map<string, bytes> inputs = 3;
}

// A subscriber response to a subscription delivery, either `ack`ing or `nack`ing the delivery.
message PipelineSubDeliveryResponse {
    oneof result {
        // An acknowledgement of successful processing of this stage and its inputs, along with the
        // require stage output of this stage.
        PipelineStageOutput ack = 1;
        // An error has taken place during subscriber processing, and the delivered batch was not
        // successfully processed.
        //
        // The given error message will be recorded by the server for observability.
        Error nack = 2;
    }
}

// The output of a successful pipeline stage consumption.
message PipelineStageOutput {
    // The base output of the corresponding pipeline stage.
    bytes output = 1;
}

///////////////////////////////////////////////////////////////////////////////
// Metadata ///////////////////////////////////////////////////////////////////

// A response to a metadata subscription setup request.
message MetadataSubSetupResponse {
    oneof result {
        ClusterMetadata ok = 1;
        Error err = 2;
    }
}

// All known metadata of the target cluster.
message ClusterMetadata {
    // The name of the cluster which was queried.
    string cluster_name = 1;
    // All known pods of the Hadron cluster.
    repeated string pods = 2;
    // A mapping of all known streams, with metadata data on all partitions,
    // their leaders and their replicas.
    map<string, StreamMetadata> streams = 3;
    // A mapping of all known pipelines, with metadata data on all partitions,
    // their leaders and their replicas.
    map<string, PipelineMetadata> pipelines = 4;
}

// Stream metadata.
message StreamMetadata {
    // The name of the stream.
    string name = 1;
    // The partitions of this stream.
    repeated PartitionMetadata partitions = 2;
}

// Pipeline metadata.
message PipelineMetadata {
    // The name of the pipeline.
    string name = 1;
    // The source stream of this pipeline.
    //
    // This is used by clients to establish pipeline topology, as pipelines mirror their source
    // stream's topology.
    string source_stream = 2;
}

// Metadata of a stream partition.
message PartitionMetadata {
    // The offset of this partition (actually an unsigned 8-bit integer).
    uint32 offset = 1;
    // The pod name of the partition leader.
    string leader = 2;
    // The pod names of all replicas of this partition.
    repeated string replicas = 3;
    // The schedule state of the partition.
    string schedule_state = 4;
    // The runtime state of the partition.
    string runtime_state = 5;
}

// A metadata change.
message MetadataChange {
    // The type of metadata change observed.
    oneof change {
        // Metadata streams were reset on the connected pod, so a new full payload has been sent.
        ClusterMetadata reset = 1;
        // A pod has been added.
        //
        // This corresponds to StatefulSet scaling events. Not temprorary pod state changes.
        string pod_added = 2;
        // A pod has been removed.
        //
        // This corresponds to StatefulSet scaling events. Not temprorary pod state changes.
        string pod_removed = 3;
        // A stream has been updated or added.
        StreamMetadata stream_updated = 4;
        // A stream has been removed.
        string stream_removed = 5;
        // A pipeline has been updated or added.
        PipelineMetadata pipeline_updated = 6;
        // A pipeline has been removed.
        string pipeline_removed = 7;
    }
}
