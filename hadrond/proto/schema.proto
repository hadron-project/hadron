// Storage protos for schema management data.
syntax = "proto2";
package schema;

// Common metadata found as part of most schema statements.
message Metadata {
    // The name associated with this object.
    required string name = 1;
    // The namespace to which this object applies.
    required string namespace = 2;
    // A description of this object.
    required string description = 3;
}

// A namespace for grouping resources.
message Namespace {
    // The unique ID of this object.
    //
    // When this object is declared via YAML as part of the schema management system, the ID field
    // is ignored and defaults to `0`, as IDs are only used internally and are not exposed to the
    // end users.
    required uint64 id = 1;
    // The unique identifier of this namespace.
    required string name = 2;
    // A description of this namespace.
    required string description = 3;
}

// A durable log of events with a configurable number of partitions.
//
// Partitions in Hadron are used to increasing write throughput by horizontally scaling the
// workload of a stream across multiple Hadron nodes.
//
// In Hadron, the partitions of a stream are explicitly assigned to different replica sets of
// the cluster as part of the metadata system. A stream may only have one partition on a
// replica set, though the stream may _indefinitely_ scale across any number of different
// replica sets.
//
// The replication factor of a stream's data is governed by the replication factor of each
// replica set running a partition of the stream, and may differ per replica set.
message Stream {
    // The unique ID of this object.
    //
    // When this object is declared via YAML as part of the schema management system, the ID field
    // is ignored and defaults to `0`, as IDs are only used internally and are not exposed to the
    // end users.
    required uint64 id = 1;
    // Object metadata.
    required Metadata metadata = 2;
    // The partition assignments of this stream.
    //
    // Adding new partitions to a stream is allowed, however removing partitions of a stream is
    // not allowed as it would result in the loss of the data of the removed partition.
    repeated string partitions = 3;
    // An optional TTL duration specifying how long records are to be kept on the stream.
    //
    // If not specified, then records will stay on the stream forever.
    optional string ttl = 4;
}

// A multi-stage data workflow.
message Pipeline {
    // The unique ID of this object.
    //
    // When this object is declared via YAML as part of the schema management system, the ID field
    // is ignored and defaults to `0`, as IDs are only used internally and are not exposed to the
    // end users.
    required uint64 id = 1;
    // Object metadata.
    required Metadata metadata = 2;
    // The replica set on which this pipeline is to run.
    //
    // The replication factor of the data on this pipeline is governed by the configuration of
    // the assigned replica set.
    required string replica_set = 3;
    // The name of the stream which will trigger this pipeline.
    required string input_stream = 4;
    // Event type matchers which will trigger this pipeline.
    repeated string triggers = 5;
    // The stages of this pipeline.
    repeated PipelineStage stages = 6;
}

// A single pipeline stage.
message PipelineStage {
    // The name of this pipeline stage, which is unique per pipeline.
    required string name = 1;
    // All stages which must complete before this stage may be started.
    repeated string after = 2;
    // All inputs which this stage depends upon in order to be started.
    repeated string dependencies = 3;
    // All outputs which this stage must produce in order to complete successfully.
    repeated PipelineStageOutput outputs = 4;
}

// A pipeline stage output definition.
message PipelineStageOutput {
    // The name of this pipeline stage output, which is unique per pipeline stage.
    required string name = 1;
    // The name of the stream to which this output event is to be published.
    required string stream = 2;
    // The namespace of the output stream.
    required string namespace = 3;
}

// A RPC endpoint definition.
message Endpoint {
    // The unique ID of this object.
    //
    // When this object is declared via YAML as part of the schema management system, the ID field
    // is ignored and defaults to `0`, as IDs are only used internally and are not exposed to the
    // end users.
    required uint64 id = 1;
    // Object metadata.
    required Metadata metadata = 2;
    // The replica set on which this endpoint is to run.
    required string replica_set = 3;
    // The input RPC mode.
    required EndpointMessageFlow input = 4;
    // The output RPC mode.
    required EndpointMessageFlow output = 5;
}

// A RPC endpoint message mode.
enum EndpointMessageFlow {
    Oneshot = 0;
    Streaming = 1;
}

// A schema branch model.
message SchemaBranch {
    // The name of the branch.
    required string name = 1;
    // The most recently applied timestamp for this branch.
    required int64 timestamp = 2;
}
